import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score
import matplotlib.pyplot as plt
import joblib
# Membaca file Excel
data = pd.read_excel('HARGA_RUMAH.xlsx')

# Pisahkan variabel X sebagai variabel independen dan variabel y sebagai variabel dependen
X = data[['LB', 'JKT']]  # variabel independen
y = data['HARGA']  # variabel dependen (target)

# Check if 'LB' or 'JKT' columns contain any non-numeric values
print(X.dtypes)
# If the columns are of type 'object', it indicates the presence of strings.
# You might need to clean the data by removing or replacing non-numeric values.
# For example, you could remove rows with non-numeric values:
# X = X[pd.to_numeric(X['LB'], errors='coerce').notnull()]
# X = X[pd.to_numeric(X['JKT'], errors='coerce').notnull()]


# Membagi data ke dalam data latih dan uji (70% training, 30% testing)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Membuat model regresi linier
model = LinearRegression()

# Melatih model dengan data training
model.fit(X_train, y_train)

# Memprediksi harga rumah menggunakan data uji
y_pred = model.predict(X_test)
# Menampilkan koefisien regresi
print(f"Koefisien: {model.coef_}")
print(f"Intercept: {model.intercept_}")
print(f"R^2 = {r2_score(y_test, y_pred)}")
# Menampilkan hasil prediksi vs data aktual
results = pd.DataFrame({'Data Aktual': y_test, 'Prediksi': y_pred})
print(results)
# Visualisasi hasil prediksi

# Scatter plot antara harga rumah aktual dan prediksi
plt.scatter(y_test, y_pred, color='blue', label='Data Prediksi')
# Menambahkan garis lurus referensi (y = x)
max_value = max(max(y_test), max(y_pred))
min_value = min(min(y_test), min(y_pred))
plt.plot([min_value, max_value], [min_value, max_value], color='red', linestyle='--', label='Garis Ideal (y = x)')

# Menambahkan label dan judul
plt.xlabel("Harga Rumah Aktual")
plt.ylabel("Harga Rumah Prediksi")
plt.title("Prediksi vs Aktual")

# menampilkan legend
plt.legend()

# Menampilkan plot
plt.show()
# Simpan model ke dalam file .pkl
joblib.dump(model, 'model_regresi_linier.pkl')
# Muat model dari file
model = joblib.load('model_regresi_linier.pkl')

# Gunakan model untuk membuat prediksi
luas_bangunan = int(input("Masukkan Luas Bangunan: "))
jumlah_kamar = int(input("Masukkan jumlah kamar: "))
prediksi = model.predict([[luas_bangunan, jumlah_kamar]])
print(f"Prediksi harga rumah: {prediksi[0]}")
